import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { DataSource } from 'typeorm';
import { User } from '../database/entities/user.entity';
import { UserProfile } from '../database/entities/user-profile.entity';
import { UserRole } from '../common/enums';
import * as bcrypt from 'bcrypt';

/**
 * Script kh·ªüi t·∫°o Super Admin v√† Admin users
 * Ch·∫°y: npm run script:init-admin
 */
async function initAdminUsers() {
  console.log('üöÄ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o Admin users...');

  const app = await NestFactory.createApplicationContext(AppModule);
  const dataSource = app.get(DataSource);

  try {
    // ƒê·∫£m b·∫£o database schema ƒë√£ ƒë∆∞·ª£c t·∫°o
    console.log('üîÑ ƒêang ƒë·ªìng b·ªô database schema...');
    console.log('üìä Database info:', {
      host: (dataSource.options as any).host,
      port: (dataSource.options as any).port,
      database: (dataSource.options as any).database,
    });
    
    await dataSource.synchronize();
    console.log('‚úÖ Database schema ƒë√£ ƒë∆∞·ª£c ƒë·ªìng b·ªô!');

    // Ki·ªÉm tra xem ƒë√£ c√≥ Super Admin ch∆∞a
    const existingSuperAdmin = await dataSource
      .getRepository(User)
      .findOne({ where: { role: UserRole.SUPER_ADMIN } });

    if (existingSuperAdmin) {
      console.log('‚ö†Ô∏è  Super Admin ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    } else {
      // T·∫°o Super Admin
      const superAdminPassword = 'SuperAdmin@2025!';
      const superAdminPasswordHash = await bcrypt.hash(superAdminPassword, 12);

      const superAdmin = dataSource.getRepository(User).create({
        email: 'superadmin@p2a-asean.org',
        passwordHash: superAdminPasswordHash,
        role: UserRole.SUPER_ADMIN,
        isActive: true,
        isEmailVerified: true,
        emailVerifiedAt: new Date(),
      });

      await dataSource.getRepository(User).save(superAdmin);

      // T·∫°o profile cho Super Admin
      const superAdminProfile = dataSource.getRepository(UserProfile).create({
        userId: superAdmin.id,
        user: superAdmin,
        fullName: 'Super Administrator',
        phoneNumber: '+84-xxx-xxx-xxxx',
        dateOfBirth: new Date('1990-01-01'),
        gender: 'other',
        country: 'ASEAN',
        city: 'Regional',
        bio: 'Super Administrator c·ªßa P2A ASEAN Platform',
        avatarUrl: null,
        linkedinUrl: 'https://linkedin.com/in/p2a-super-admin',
        websiteUrl: 'https://p2a-asean.org',
      });

      await dataSource.getRepository(UserProfile).save(superAdminProfile);

      console.log('‚úÖ ƒê√£ t·∫°o Super Admin th√†nh c√¥ng!');
      console.log(`üìß Email: superadmin@p2a-asean.org`);
      console.log(`üîë Password: ${superAdminPassword}`);
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ Admin ch∆∞a
    const existingAdmin = await dataSource
      .getRepository(User)
      .findOne({ where: { role: UserRole.ADMIN } });

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  Admin ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
    } else {
      // T·∫°o Admin
      const adminPassword = 'Admin@2025!';
      const adminPasswordHash = await bcrypt.hash(adminPassword, 12);

      const admin = dataSource.getRepository(User).create({
        email: 'admin@p2a-asean.org',
        passwordHash: adminPasswordHash,
        role: UserRole.ADMIN,
        isActive: true,
        isEmailVerified: true,
        emailVerifiedAt: new Date(),
      });

      await dataSource.getRepository(User).save(admin);

      // T·∫°o profile cho Admin
      const adminProfile = dataSource.getRepository(UserProfile).create({
        userId: admin.id,
        user: admin,
        fullName: 'System Administrator',
        phoneNumber: '+84-xxx-xxx-xxxx',
        dateOfBirth: new Date('1990-01-01'),
        gender: 'other',
        country: 'ASEAN',
        city: 'Regional',
        bio: 'System Administrator c·ªßa P2A ASEAN Platform',
        avatarUrl: null,
        linkedinUrl: 'https://linkedin.com/in/p2a-admin',
        websiteUrl: 'https://p2a-asean.org',
      });

      await dataSource.getRepository(UserProfile).save(adminProfile);

      console.log('‚úÖ ƒê√£ t·∫°o Admin th√†nh c√¥ng!');
      console.log(`üìß Email: admin@p2a-asean.org`);
      console.log(`üîë Password: ${adminPassword}`);
    }

    console.log('\nüéâ Ho√†n th√†nh kh·ªüi t·∫°o Admin users!');
    console.log('\nüìã Th√¥ng tin ƒëƒÉng nh·∫≠p:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ SUPER ADMIN                                            ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    console.log('‚îÇ Email: superadmin@p2a-asean.org                       ‚îÇ');
    console.log('‚îÇ Password: SuperAdmin@2025!                             ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ ADMIN                                                  ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    console.log('‚îÇ Email: admin@p2a-asean.org                             ‚îÇ');
    console.log('‚îÇ Password: Admin@2025!                                  ‚îÇ');
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
    console.log('\n‚ö†Ô∏è  L∆∞u √Ω: H√£y ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu!');

  } catch (error) {
    console.error('‚ùå L·ªói khi kh·ªüi t·∫°o Admin users:', error);
    throw error;
  } finally {
    await app.close();
  }
}

// Ch·∫°y script
initAdminUsers()
  .then(() => {
    console.log('‚úÖ Script ho√†n th√†nh!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });

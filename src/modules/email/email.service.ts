import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as nodemailer from 'nodemailer';
import { Transporter } from 'nodemailer';

/**
 * Email Service - X·ª≠ l√Ω g·ª≠i email
 * S·ª≠ d·ª•ng Nodemailer v·ªõi SMTP
 */
@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);
  private transporter: Transporter;

  constructor(private configService: ConfigService) {
    this.initializeTransporter();
  }

  /**
   * Kh·ªüi t·∫°o SMTP transporter
   */
  private initializeTransporter() {
    const mailConfig = this.configService.get('mail');

    this.transporter = nodemailer.createTransport({
      host: mailConfig.host,
      port: mailConfig.port,
      secure: mailConfig.secure,
      auth: mailConfig.auth,
    });

    // Verify connection
    this.transporter.verify((error) => {
      if (error) {
        this.logger.error('Email transporter verification failed', error);
      } else {
        this.logger.log('Email transporter is ready');
      }
    });
  }

  /**
   * G·ª≠i email x√°c th·ª±c t√†i kho·∫£n
   */
  async sendVerificationEmail(email: string, fullName: string, token: string): Promise<void> {
    const mailConfig = this.configService.get('mail');
    const verificationUrl = `${mailConfig.verificationUrl}?token=${token}`;

    const htmlContent = this.getVerificationEmailTemplate(fullName, verificationUrl);

    try {
      await this.transporter.sendMail({
        from: `"${mailConfig.from.name}" <${mailConfig.from.email}>`,
        to: email,
        subject: 'X√°c th·ª±c t√†i kho·∫£n P2A ASEAN',
        html: htmlContent,
      });

      this.logger.log(`Verification email sent to ${email}`);
    } catch (error) {
      this.logger.error(`Failed to send verification email to ${email}`, error);
      throw error;
    }
  }

  /**
   * G·ª≠i email ch√†o m·ª´ng sau khi x√°c th·ª±c th√†nh c√¥ng
   */
  async sendWelcomeEmail(email: string, fullName: string): Promise<void> {
    const mailConfig = this.configService.get('mail');
    const htmlContent = this.getWelcomeEmailTemplate(fullName);

    try {
      await this.transporter.sendMail({
        from: `"${mailConfig.from.name}" <${mailConfig.from.email}>`,
        to: email,
        subject: 'Ch√†o m·ª´ng ƒë·∫øn v·ªõi P2A ASEAN!',
        html: htmlContent,
      });

      this.logger.log(`Welcome email sent to ${email}`);
    } catch (error) {
      this.logger.error(`Failed to send welcome email to ${email}`, error);
      // Kh√¥ng throw error v√¨ email ch√†o m·ª´ng kh√¥ng quan tr·ªçng b·∫±ng email x√°c th·ª±c
    }
  }

  /**
   * G·ª≠i email reset m·∫≠t kh·∫©u
   */
  async sendPasswordResetEmail(email: string, fullName: string, token: string): Promise<void> {
    const mailConfig = this.configService.get('mail');
    const appUrl = this.configService.get('app.url');
    const resetUrl = `${appUrl}/auth/reset-password?token=${token}`;

    const htmlContent = this.getPasswordResetEmailTemplate(fullName, resetUrl);

    try {
      await this.transporter.sendMail({
        from: `"${mailConfig.from.name}" <${mailConfig.from.email}>`,
        to: email,
        subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u P2A ASEAN',
        html: htmlContent,
      });

      this.logger.log(`Password reset email sent to ${email}`);
    } catch (error) {
      this.logger.error(`Failed to send password reset email to ${email}`, error);
      throw error;
    }
  }

  /**
   * Template email x√°c th·ª±c
   */
  private getVerificationEmailTemplate(fullName: string, verificationUrl: string): string {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .button { display: inline-block; padding: 12px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üéì P2A ASEAN Platform</h1>
            </div>
            <div class="content">
              <h2>Xin ch√†o ${fullName}!</h2>
              <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i P2A ASEAN Platform.</p>
              <p>Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c ƒë·ªãa ch·ªâ email c·ªßa b·∫°n:</p>
              <div style="text-align: center;">
                <a href="${verificationUrl}" class="button">X√°c th·ª±c Email</a>
              </div>
              <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
              <p style="word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px;">
                ${verificationUrl}
              </p>
              <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.</p>
              <p>N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.</p>
            </div>
            <div class="footer">
              <p>¬© 2025 P2A ASEAN Platform. All rights reserved.</p>
              <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
            </div>
          </div>
        </body>
      </html>
    `;
  }

  /**
   * Template email ch√†o m·ª´ng
   */
  private getWelcomeEmailTemplate(fullName: string): string {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi P2A ASEAN!</h1>
            </div>
            <div class="content">
              <h2>Xin ch√†o ${fullName}!</h2>
              <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng!</p>
              <p>B·∫°n ƒë√£ s·∫µn s√†ng kh√°m ph√° c√°c t√≠nh nƒÉng c·ªßa P2A ASEAN Platform:</p>
              <ul>
                <li>üéì T√¨m ki·∫øm c∆° h·ªôi h·ªçc t·∫≠p v√† trao ƒë·ªïi sinh vi√™n</li>
                <li>üíº Kh√°m ph√° vi·ªác l√†m v√† th·ª±c t·∫≠p</li>
                <li>üî¨ K·∫øt n·ªëi v·ªõi c√°c d·ª± √°n nghi√™n c·ª©u</li>
                <li>üöÄ T√¨m hi·ªÉu v·ªÅ h·ªá sinh th√°i kh·ªüi nghi·ªáp</li>
              </ul>
              <p>Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi!</p>
            </div>
            <div class="footer">
              <p>¬© 2025 P2A ASEAN Platform. All rights reserved.</p>
            </div>
          </div>
        </body>
      </html>
    `;
  }

  /**
   * Template email reset m·∫≠t kh·∫©u
   */
  private getPasswordResetEmailTemplate(fullName: string, resetUrl: string): string {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .container { max-width: 600px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
            .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }
            .button { display: inline-block; padding: 12px 30px; background: #667eea; color: white; text-decoration: none; border-radius: 5px; margin: 20px 0; }
            .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
            </div>
            <div class="content">
              <h2>Xin ch√†o ${fullName}!</h2>
              <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n.</p>
              <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
              <div style="text-align: center;">
                <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
              </div>
              <p>Ho·∫∑c copy link sau v√†o tr√¨nh duy·ªát:</p>
              <p style="word-break: break-all; background: #e9ecef; padding: 10px; border-radius: 5px;">
                ${resetUrl}
              </p>
              <p><strong>L∆∞u √Ω:</strong> Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù.</p>
              <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
            </div>
            <div class="footer">
              <p>¬© 2025 P2A ASEAN Platform. All rights reserved.</p>
              <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
            </div>
          </div>
        </body>
      </html>
    `;
  }
}

